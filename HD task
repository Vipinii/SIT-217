// Motor Pins
const int motor1Pin1 = 2;
const int motor1Pin2 = 3;
const int motor2Pin1 = 4;
const int motor2Pin2 = 5;

// Command characters
const char forwardCmd = 'F';
const char backwardCmd = 'B';
const char leftCmd = 'L';
const char rightCmd = 'R';
const char stopCmd = 'S';

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Set motor control pins as output
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);

  // Stop the motors initially
  stopMotors();
}

void loop() {
  if (Serial.available()) {
    char command = Serial.read();
    executeCommand(command);
  }
}

void executeCommand(char command) {
  switch (command) {
    case forwardCmd:
      moveForward();
      break;
    case backwardCmd:
      moveBackward();
      break;
    case leftCmd:
      turnLeft();
      break;
    case rightCmd:
      turnRight();
      break;
    case stopCmd:
      stopMotors();
      break;
    default:
      // Check if it's a command with duration
      if (isCommandWithDuration(command)) {
        int duration = parseDurationFromCommand(command);
        executeCommandWithDuration(getCommandWithoutDuration(command), duration);
      }
      break;
  }
}

bool isCommandWithDuration(char command) {
  return command >= '0' && command <= '9';
}

int parseDurationFromCommand(char command) {
  return command - '0';
}

char getCommandWithoutDuration(char command) {
  return Serial.read();
}

void executeCommandWithDuration(char command, int duration) {
  executeCommand(command);
  delay(duration * 1000);
  executeCommand(stopCmd);
}

void moveForward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void moveBackward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void turnLeft() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void turnRight() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void stopMotors() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}
